name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.15.0'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint || echo "No lint script found"

    - name: Run unit tests
      run: npm test
      
    - name: Generate test coverage
      run: npm run test:coverage || npm test -- --coverage || echo "Coverage not configured"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  # Code Analysis
  code-analysis:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@v5.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

    - name: Run ESLint
      run: |
        npm ci
        npx eslint . --ext .js,.jsx --format json --output-file eslint-report.json || true

    - name: Upload ESLint report
      uses: actions/upload-artifact@v4
      with:
        name: eslint-report
        path: eslint-report.json

  # Docker Build and Push
  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-analysis]
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  #  Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: docker-build
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()

  #  Deploy to Kubernetes (Local-Only: Dry Run)
  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        echo "KUBECONFIG=${PWD}/kubeconfig" >> $GITHUB_ENV

    - name: Update image in Kubernetes manifests
      run: |
        sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/*.yaml

    - name: Apply Kubernetes manifests (Dry Run)
      run: |
        echo "NOTE: Skipping actual kubectl apply because the cluster is local-only."
        echo "Run these commands manually to deploy locally:"
        echo "kubectl apply -f k8s/namespace.yaml --validate=false"
        echo "kubectl apply -f k8s/configmap.yaml --validate=false"
        echo "kubectl apply -f k8s/secret.yaml --validate=false"
        echo "kubectl apply -f k8s/deployment.yaml --validate=false"
        echo "kubectl apply -f k8s/service.yaml --validate=false"
        echo "kubectl apply -f k8s/hpa.yaml --validate=false"
        echo "kubectl apply -f k8s/ingress.yaml --validate=false"

    - name: Wait for deployment (Dry Run)
      run: |
        echo "NOTE: Skipping kubectl rollout status because the cluster is local-only."
        echo "Run this locally to check rollout:"
        echo "kubectl -n devops-exercise rollout status deployment/nodejs-app"

    - name: Run smoke tests (placeholder)
      run: |
        echo "Running smoke tests placeholder..."
        echo "Add your smoke test commands here if you run them locally."
